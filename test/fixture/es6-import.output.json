[
  {
    "description": "This is a sink",
    "tags": [],
    "loc": {
      "start": {
        "line": 7,
        "column": 0
      },
      "end": {
        "line": 9,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 38,
          "column": 1
        }
      },
      "code": "/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n"
    },
    "errors": [],
    "name": "Sink",
    "kind": "class",
    "members": {
      "instance": [
        {
          "description": "",
          "tags": [
            {
              "title": "param",
              "description": "the height of the thing",
              "lineNumber": 1,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "height"
            },
            {
              "title": "param",
              "description": "the width of the thing",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "width"
            }
          ],
          "loc": {
            "start": {
              "line": 30,
              "column": 2
            },
            "end": {
              "line": 33,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 34,
                "column": 2
              },
              "end": {
                "line": 37,
                "column": 3
              }
            },
            "code": "/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n"
          },
          "errors": [],
          "params": [
            {
              "title": "param",
              "description": "the height of the thing",
              "lineNumber": 1,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "height"
            },
            {
              "title": "param",
              "description": "the width of the thing",
              "lineNumber": 2,
              "type": {
                "type": "NameExpression",
                "name": "number"
              },
              "name": "width"
            }
          ],
          "name": "constructor",
          "kind": "function",
          "memberof": "Sink",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Sink",
            "constructor"
          ]
        },
        {
          "description": "Is it empty",
          "tags": [],
          "loc": {
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 19,
                "column": 2
              },
              "end": {
                "line": 21,
                "column": 3
              }
            },
            "code": "/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n"
          },
          "errors": [],
          "name": "empty",
          "kind": "function",
          "memberof": "Sink",
          "scope": "instance",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Sink",
            "empty"
          ]
        }
      ],
      "static": [
        {
          "description": "This method says hello",
          "tags": [],
          "loc": {
            "start": {
              "line": 23,
              "column": 2
            },
            "end": {
              "line": 25,
              "column": 5
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 26,
                "column": 2
              },
              "end": {
                "line": 28,
                "column": 3
              }
            },
            "code": "/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n"
          },
          "errors": [],
          "name": "hello",
          "kind": "function",
          "memberof": "Sink",
          "scope": "static",
          "members": {
            "instance": [],
            "static": []
          },
          "path": [
            "Sink",
            "hello"
          ]
        }
      ]
    },
    "path": [
      "Sink"
    ]
  },
  {
    "description": "This is an async method",
    "tags": [],
    "loc": {
      "start": {
        "line": 52,
        "column": 0
      },
      "end": {
        "line": 54,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 55,
          "column": 0
        },
        "end": {
          "line": 55,
          "column": 24
        }
      },
      "code": "/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n"
    },
    "errors": [],
    "name": "foo",
    "kind": "function",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      "foo"
    ]
  },
  {
    "description": "This function takes rest params",
    "tags": [],
    "loc": {
      "start": {
        "line": 40,
        "column": 0
      },
      "end": {
        "line": 42,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 43,
          "column": 0
        },
        "end": {
          "line": 44,
          "column": 1
        }
      },
      "code": "/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n"
    },
    "errors": [],
    "name": "functionWithRest",
    "kind": "function",
    "params": [
      {
        "title": "param",
        "name": "someParams",
        "type": {
          "type": "RestType"
        }
      }
    ],
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      "functionWithRest"
    ]
  },
  {
    "description": "So does this one, with types",
    "tags": [],
    "loc": {
      "start": {
        "line": 46,
        "column": 0
      },
      "end": {
        "line": 48,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 49,
          "column": 0
        },
        "end": {
          "line": 50,
          "column": 1
        }
      },
      "code": "/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n"
    },
    "errors": [],
    "name": "functionWithRestAndType",
    "kind": "function",
    "params": [
      {
        "title": "param",
        "name": "someParams",
        "type": {
          "type": "RestType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        }
      }
    ],
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      "functionWithRestAndType"
    ]
  },
  {
    "description": "This function returns the number one.",
    "tags": [
      {
        "title": "returns",
        "description": "numberone",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 4,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 31
        }
      },
      "code": "/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n"
    },
    "errors": [],
    "returns": [
      {
        "title": "returns",
        "description": "numberone",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      }
    ],
    "name": "multiply",
    "kind": "function",
    "params": [
      {
        "title": "param",
        "name": "a",
        "lineNumber": 5
      },
      {
        "title": "param",
        "name": "b",
        "lineNumber": 5
      }
    ],
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      "multiply"
    ]
  },
  {
    "description": "This function returns the number one.",
    "tags": [
      {
        "title": "returns",
        "description": "numberone",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0
      },
      "end": {
        "line": 6,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 7,
          "column": 43
        }
      },
      "code": "import multiply from \"./es6.input.js\";\n\n/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nvar multiplyTwice = (a) => a * multiply(a);\n\nexport default multiplyTwice;\n"
    },
    "errors": [],
    "returns": [
      {
        "title": "returns",
        "description": "numberone",
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      }
    ],
    "name": "multiplyTwice",
    "kind": "function",
    "params": [
      {
        "title": "param",
        "name": "a",
        "lineNumber": 7
      }
    ],
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      "multiplyTwice"
    ]
  },
  {
    "description": "This is a property of the sink.",
    "tags": [],
    "loc": {
      "start": {
        "line": 11,
        "column": 2
      },
      "end": {
        "line": 13,
        "column": 5
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 14,
          "column": 2
        },
        "end": {
          "line": 14,
          "column": 18
        }
      },
      "code": "/**\n * This function returns the number one.\n * @returns {Number} numberone\n */\nvar multiply = (a, b) => a * b;\n\n/**\n * This is a sink\n */\nclass Sink {\n  /**\n   * This is a property of the sink.\n   */\n  staticProp = 42;\n\n  /**\n   * Is it empty\n   */\n  empty() {\n    return 1;\n  }\n\n  /**\n   * This method says hello\n   */\n  static hello() {\n    return 'hello';\n  }\n\n  /**\n   * @param {number} height the height of the thing\n   * @param {number} width the width of the thing\n   */\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\n/**\n * This function takes rest params\n */\nfunction functionWithRest(...someParams) {\n}\n\n/**\n * So does this one, with types\n */\nfunction functionWithRestAndType(...someParams: number) {\n}\n\n/**\n * This is an async method\n */\nasync function foo() { }\n\nexport default multiply;\n"
    },
    "errors": [],
    "name": "staticProp",
    "members": {
      "instance": [],
      "static": []
    },
    "path": [
      "staticProp"
    ]
  }
]